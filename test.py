aaaa=[2,    106,   1645,    108,  13132,    908,    675,
           476,  12354,   1703,    577,   1501,   3096,    921,    576,  44138,
          6205, 235265,    107,    108,    106,   2516,    108,   4038,  12354,
          1703,    577,   1501,   3096,    774,  44138,   6205,    603,    577,
          3104,    476,  10616,   4562,  34102,    689,  27883,   2177,  63603,
          5100,   1582,    685,   9975,  24922, 235269,   2187,  86580, 235269,
        106260,    576,   9662,    689,   4368, 235269,    578,   1693,  12989,
         22515, 235265,   7248,    731, 105071,    573,   8691,   2480,    578,
          8882,    576,    573,  21391, 235269,    578,   9900,    573,   6205,
          1280,    476,  56157,  50728,  12400, 235265,  35486,  24922,   1538,
           614,   3652,    578,   1004, 154494,   1280,  60245,    577,  18594,
           476,   2910,  10377, 235269,  86580,    798,    614,  12919,    774,
         18935,    577,   1501,    476, 166962,   4953, 235269,   9662,    689,
          4368, 106260,    798,    614,   1671,    577,   1501,    476,  52938,
        235269,    578,  12989,  22515,    798,    614,  20677,   1280,  23148,
         12136, 235265,   5040, 235269,  10548,    573,   6205,    575,   2040,
           731, 210864,    689,  83443,   1174,    577,    476,   3222,   5449,
           577,   3104,    476, 235248, 235304, 235299,   1160,    576,   3096,
        235265,    714,   2048,   2196,    603,    476,   6239, 235269,    974,
        235290,    559, 235290, 235250, 235290,  11948,  28114,  12860, 235269,
          1644,  11911,    774,  44138,   6205,    674,   1249,    791,   8481,
         11807,    908,    575,    476,  86831, 235265,  12623, 235269,    665,
        235303, 235256,    476,   2245,    578,  58895, 235290,  20342,   1703,
           577,   8653,    861,  31583,   2183,  32526,  17512,   1105,    573,
          9156,    576,  38445, 235341,    107,    108]
print(len(aaaa))
def find_ranges(lst, target=-100):
    ranges = []
    start = None
    multiTurnOnlyOnceInfoFlag=True
    for i, num in enumerate(lst):
        if num != target and start is None:
            start = i
        elif num == target and start is not None:
            if multiTurnOnlyOnceInfoFlag:
                logger.info('这个分支理论上只有多轮对话的数据集才会进入,确保自己在使用多轮对话数据集')
                multiTurnOnlyOnceInfoFlag=False
            #  -100（start-1） start ，，，words4predictend(i-2) end(i-1) -100（i） 这个数据结构被用于从model_output里按切片取出logits来预测下一个词
            ranges.append((start-1, i-1))  # 因为是切片，i-1实际上会取到i-2范围,logits的核心就是不要预测任何-100
            start = None
    
    if start is not None:
        # 这个地方结束位置一般不重要，除非最后有什么不需要预测的特殊标志。
        ranges.append((start-1, len(lst)-1))
    
    return ranges
for i in range(23):
    aaaa[i]=-100

print(aaaa)
print(find_ranges(aaaa))
